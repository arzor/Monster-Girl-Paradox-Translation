class DamageEvalBattler < BasicObject

  def initialize(battler, item)
    @battler = battler
    @item = item
    @param = []
    @battler_param = []
  end

  def param(param_id)
    @param[param_id] ||= __make_param(param_id)
  end

  def method_missing(name, *args)
    @battler.send(name, *args)
  end

  def respond_to_missing?(sym, include_private)
    @battler.respond_to?(sym)
  end

  private

  def __battler_param(param_id)
    @battler_param[param_id] ||= @battler.send(::DamageEvalBattler.param_symbols[param_id])
  end

  def __make_param(param_id)
    __battler_param(param_id)
  end

  class << self
    def param_symbols
      [:mhp, :mmp, :atk, :def, :mat, :mdf, :agi, :luk]
    end
  end

  param_symbols.each_with_index do |meth, i|
    define_method(meth) do
      param(i)
    end
  end
end

class SkillEvalBattler < DamageEvalBattler
  def initialize(battler, item)
    super
    @convert_param = []
    @convert_param_data = @battler.category_convert_param_data(@item.stype_id)
    @add_param_data = @battler.skill_add_param_data(@item)
  end

  private

  def __make_param(param_id)
    __convert_param(param_id) + __param_add(param_id)
  end

  def __setup_skill
    return unless @item.is_a?(::RPG::Skill)
  end

  def __convert_param(param_id)
    @convert_param[param_id] ||= [__battler_param(param_id), __battler_param(@convert_param_data[param_id] || param_id)].max
  end

  def __param_add(param_id)
    return 0 if @add_param_data[param_id].nil?

    @add_param_data[param_id].inject(0) do |v, (add_param, rate)|
      v + (__convert_param(add_param) * rate)
    end
  end
end

module RPG
  class UsableItem
    def eval_damage(subject, target)
      damage.eval(DamageEvalBattler.new(subject, self), target, $game_variables)
    end
  end

  class Skill
    def eval_damage(subject, target)
      damage.eval(SkillEvalBattler.new(subject, self), target, $game_variables)
    end
  end
end
