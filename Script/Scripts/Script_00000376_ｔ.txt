module CacheActorFeatures
  class << self
    def init
      @cache = {}
    end

    def init_actor(actor)
      @cache[actor] = {}
    end

    def feature_objects(actor)
      make(:feature_objects, actor)
    end

    def features(actor, code)
      make(:features, actor, code)
    end

    def features_with_id(actor, code, data_id)
      make(:features_with_id, actor, code, data_id)
    end

    def features_sum(actor, code, data_id)
      make(:features_sum, actor, code, data_id)
    end

    def features_set(actor, code)
      make(:features_set, actor, code)
    end

    def features_pi(actor, code, data_id)
      make(:features_pi, actor, code, data_id)
    end

    def features_sum_booster(actor, code, data_id)
      make(:features_sum_booster, actor, code, data_id)
    end

    def features_max(actor, code, data_id)
      make(:features_max, actor, code, data_id)
    end

    def equip_params(actor)
      make(:equip_params, actor)
    end

    def cache?
      @flag
    end

    def start
      @flag = true
    end

    def stop
      @flag = false
      init
    end

    private

    def make(meth, actor, *args)
      @flag = false
      @cache[actor] ||= {}
      @cache[actor][meth] ||= {}
      @cache[actor][meth][args] ||= actor.send(meth, *args)
      @flag = true
      @cache[actor][meth][args]
    end
  end
end

CacheActorFeatures.init
class Game_Actor < Game_Battler
  def features(code)
    return CacheActorFeatures.features(self, code) if CacheActorFeatures.cache?

    super
  end

  def features_with_id(code, data_id)
    return CacheActorFeatures.features_with_id(self, code, data_id) if CacheActorFeatures.cache?

    super
  end

  def features_sum(code, data_id)
    return CacheActorFeatures.features_sum(self, code, data_id) if CacheActorFeatures.cache?

    super
  end

  def features_pi(code, data_id)
    return CacheActorFeatures.features_pi(self, code, data_id) if CacheActorFeatures.cache?

    super
  end

  def features_sum_booster(feature_id, data_id)
    return CacheActorFeatures.features_sum_booster(self, feature_id, data_id) if CacheActorFeatures.cache?

    super
  end

  def features_max(code, data_id)
    return CacheActorFeatures.features_max(self, code, data_id) if CacheActorFeatures.cache?

    super
  end

  def features_set(code)
    return CacheActorFeatures.features_set(self, code) if CacheActorFeatures.cache?

    super
  end

  alias hima_cache_feature_feature_objects feature_objects
  def feature_objects
    return CacheActorFeatures.feature_objects(self) if CacheActorFeatures.cache?

    hima_cache_feature_feature_objects
  end

  alias hima_cache_feature_equip_params equip_params
  def equip_params
    return CacheActorFeatures.equip_params(self) if CacheActorFeatures.cache?

    hima_cache_feature_equip_params
  end
end

class Scene_Base
  alias hima_f_terminate terminate
  def terminate
    CacheActorFeatures.init
    hima_f_terminate
  end

  alias hima_f_start start
  def start
    CacheActorFeatures.start
    hima_f_start
  end
end

class Window_EquipStatus < Window_Base
  alias hima_f_initialize initialize
  def initialize(x, y)
    @params = {}
    hima_f_initialize(x, y)
  end

  def refresh
    @params = {}
    refresh_temp
  end

  def draw_current_param(x, y, param_id)
    change_color(normal_color)
    @params[param_id] ||= @actor.param(param_id)
    draw_number_unit(x, y, 42, line_height, @params[param_id], 2)
  end

  def draw_new_param(x, y, param_id)
    new_value = @temp_actor.param(param_id)
    change_color(param_change_color(new_value - @params[param_id]))
    draw_number_unit(x, y, 42, line_height, new_value, 2)
  end

  def refresh_temp
    contents.clear
    draw_actor_name(@actor, 4, 0) if @actor
    6.times { |i| draw_item(0, line_height * (1 + i), 2 + i) }
  end

  def set_temp_actor(temp_actor)
    return if @temp_actor == temp_actor

    @temp_actor = temp_actor
    refresh_temp
  end
end

class Window_Selectable < Window_Base
  alias hima_f_initialize initialize
  def initialize(x, y, width, height)
    @draw = []
    hima_f_initialize(x, y, width, height)
  end

  def refresh
    create_contents
    draw_all_items
  end

  def create_contents
    @draw = []
    super
  end

  def draw_all_items
    @draw = []
    draw_page
  end

  def draw_page
    index = top_row * col_max
    max = [(index + page_item_max + 1), item_max].min
    return if (max - index) <= 0

    (max - index).times do |i|
      next if @draw[i + index]

      @draw[i + index] = true
      draw_item(i + index)
    end
  end

  def index=(index)
    @index = index
    update_cursor
    call_update_help
    draw_page if index != 0
  end

  def oy=(oy)
    super
    draw_page
  end

  def ox=(ox)
    super
    draw_page
  end
end

class Scene_Equip < Scene_MenuBase
  alias hima_f_on_item_ok on_item_ok
  def on_item_ok
    hima_f_on_item_ok
    @status_window.refresh
  end
end

class Game_Actor
  alias hima_f_refresh refresh
  def refresh
    CacheActorFeatures.init_actor(self)
    hima_f_refresh
  end
end

class Game_BattlerBase
  def hp=(hp)
    @hp = hp
    refresh_hp
  end

  def mp=(mp)
    @mp = mp
    refresh_mp
  end

  def tp=(tp)
    @tp = tp
    refresh_tp
  end

  def refresh_hp
    @hp = [[@hp, mhp].min, 0].max
    @hp == 0 ? add_state(death_state_id) : remove_state(death_state_id)
  end

  def refresh_mp
    @mp = [[@mp, mmp].min, 0].max
  end

  def refresh_tp
    @tp = [[tp, max_tp].min, 0].max
  end

  def refresh
    state_resist_set.each { |state_id| erase_state(state_id) }
    refresh_hp
    refresh_mp
    refresh_tp
  end
end

class Game_Actor
  def refresh_tp
    return super unless @temp_max_tp

    next_max_tp = [@tp, @temp_max_tp].min
    @temp_max_tp = next_max_tp <= max_tp ? nil : next_max_tp
    @tp = [[tp, @temp_max_tp || max_tp].min, 0].max
  end
end
