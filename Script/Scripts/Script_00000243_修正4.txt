#命令追加
class Game_Interpreter
	def actor_skill_have?(actor_id,skill_id)
		return false unless $game_actors.exist?(actor_id)
		skill = $data_skills[skill_id]
		return false if skill.nil?
		$game_actors[actor_id].skill_learn?(skill) || $game_actors[actor_id].all_abilities.include?(skill_id)
	end
	def actor_set_ability?(actor_id,skill_id)
		return false unless $game_actors.exist?(actor_id)
		skill = $data_skills[skill_id]
		return false if skill.nil?
		$game_actors[actor_id].all_equip_abilities.include?(skill_id)
	end
	def all_members_add_state(state_id)
		$game_party.all_members.each{|actor|
			actor.add_state(state_id)
		}
	end
	#アクターの初期化
	def clear_actor_ex(actor_id)
		return unless $game_actors.exist?(actor_id)
		change_id = $game_actors[actor_id].id
		$game_actors[actor_id].clear_equipments
		$game_actors[actor_id].reset
		$game_actors[actor_id].persona_change(change_id)
	end
end

class Game_Actor
	def reset
    @class_id = actor.class_id
    @tribe_id = actor.initial_tribe_id
    @level_list = {}
    @exp = {}
    init_level
    init_exp
    init_skills
    clear_param_plus
    recover_all
	end
end

#レベル100以上解放
class Game_Actor < Game_Battler
	#--------------------------------------------------------------------------
	# ● 通常能力値の基本値取得
	#--------------------------------------------------------------------------
	def param_base(param_id)
		if base_level >= 100
			self.base.params[param_id, 99] + (self.base.params[param_id, 99] - self.base.params[param_id, 98])*( base_level - 99)
		else
			self.base.params[param_id, base_level]
		end
	end
end




#パーティ経験値取得
class Game_Interpreter
	def gain_party_exp(exp, show = false)
		$game_party.all_members.each{|actor|
			actor.change_exp(actor.base_exp + exp,show,:base)
		}
	end
	
	def gain_party_class_exp(exp, show = false)
		$game_party.all_members.each{|actor|
			actor.change_exp(actor.class_exp + exp,show,:class)
		}
	end
	
	def gain_party_tribe_exp(exp, show = false)
		$game_party.all_members.each{|actor|
			actor.change_exp(actor.tribe_exp + exp,show,:tribe)
		}
	end 
	
	def gain_party_friend(love)
		$game_party.all_members.each{|actor|
			actor.love = actor.love + love
		}
	end
end

#計算式変更
class Game_BattlerBase
	#--------------------------------------------------------------------------
	# ○ xparam系統の特徴値の計算
	#--------------------------------------------------------------------------
	def features_xparam_rate(code, id)
		1.0 - features_with_id(code, id).inject(1.0) {|r, ft| r * (1.0 -  ft.value) }
	end
	#--------------------------------------------------------------------------
	# ○ 追加能力値の取得
	#--------------------------------------------------------------------------
	def xparam(xparam_id)
			
		return features_sum(FEATURE_XPARAM, xparam_id) if xparam_id == 0 || xparam_id == 3 #命中と会心回避は加算
		features_xparam_rate(FEATURE_XPARAM, xparam_id)
	end
end
class Game_Battler
	#--------------------------------------------------------------------------
	# ○ 物理反射率の取得
	#--------------------------------------------------------------------------
	def physical_reflection_rate
		features_xparam_rate(FEATURE_BATTLER_ABILITY, PHYSICAL_REFLECTION)
	end
	
	#--------------------------------------------------------------------------
	# ○ 必中反撃率を取得
	#--------------------------------------------------------------------------
	def certain_counter
		features_xparam_rate(FEATURE_BATTLER_ABILITY, CERTAIN_COUNTER)
	end
	#--------------------------------------------------------------------------
	# ○ 魔法反撃率を取得
	#--------------------------------------------------------------------------
	def magical_counter
		features_xparam_rate(FEATURE_BATTLER_ABILITY, MAGICAL_COUNTER)
	end
	
end
class Game_Enemy < Game_Battler
	#--------------------------------------------------------------------------
	# ● 経験値の取得
	#--------------------------------------------------------------------------
	def exp
		return enemy.exp unless $game_variables[NWConst::Var::EXP] > 0
		(enemy.exp * $game_variables[NWConst::Var::EXP] *0.01).to_i
	end
	#--------------------------------------------------------------------------
	# ● お金の取得
	#--------------------------------------------------------------------------
	def gold
		return enemy.gold unless $game_variables[NWConst::Var::MONEY] > 0
		(enemy.gold * $game_variables[NWConst::Var::MONEY] *0.01).to_i
	end
end
